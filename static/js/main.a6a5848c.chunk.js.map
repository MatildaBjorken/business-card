{"version":3,"sources":["images/qr-code-2.png","components/github.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Language","language","bytes","color","this","LanguageData","percent","id","label","value","fetchRepos","a","fetch","then","res","json","repoResp","fetchLanguages","repos","languagesInBytes","colors","hasLanguageBeenSaved","Promise","all","map","repo","languages_url","langResp","languageData","languageBytes","Object","values","languageNames","keys","length","forEach","languageName","index","push","console","log","convertToPercent","languagesInPercent","sum","percentage","Math","round","checkForOther","sumOfOther","filter","reduce","total","currentLanguage","languages","splice","deconstructArray","languagesWithOther","getLanguages","softShadows","SpinningMesh","position","speed","args","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","ref","onClick","castShadow","attach","factor","App","setLanguages","useEffect","Languages","languageArray","i","setName","setRepos","setLocation","setBio","setUrl","data","setData","name","location","bio","public_repos","avatar_url","html_url","className","src","QR","height","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","PI","receiveShadow","opacity","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a6a5848c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/qr-code-2.c05ece32.png\";","\nimport React, { useState, useEffect } from 'react';\n\nclass Language {\n  constructor(language, bytes, color) {\n    this.language = language;\n    this.bytes = bytes;\n    this.color = color;\n  }\n}\n\nclass LanguageData {\n  constructor(language, percent, color) {\n    this.id = language;\n    this.label = language;\n    this.value = percent;\n    this.color = color;\n  }\n}\n\n\nconst fetchRepos = async () => {\n  const repoResp = await fetch(\n    'https://api.github.com/users/matildabjorken/repos',\n\n  ).then((res) => res.json());\n  return repoResp;\n};\n\nconst fetchLanguages = async (repos) => {\n  try {\n    let languagesInBytes = [];\n    let colors = [\n      '#90ee90',\n      '#add8e6',\n      '#ffc0cb',\n      '#ffc0cb',\n      '#272E3D',\n      '#3B7B80',\n      '#90ee90',\n    ];\n    let hasLanguageBeenSaved = false;\n\n    await Promise.all(\n      repos.map(async (repo) => {\n        const langResp = await fetch(repo.languages_url);\n        const languageData = await langResp.json();\n        const languageBytes = Object.values(languageData);\n        const languageNames = Object.keys(languageData);\n\n        if (languageNames.length > 0) {\n          //If project contains languages\n          languageNames.forEach((languageName, index) => {\n            if (languagesInBytes.length === 0) {\n              languagesInBytes.push(\n                new Language(languageName, languageBytes[index], colors[index])\n              );\n            } else {\n              languagesInBytes.forEach((language) => {\n                if (\n                  languageName === language.language &&\n                  !hasLanguageBeenSaved\n                ) {\n                  language.bytes += languageBytes[index];\n                  hasLanguageBeenSaved = true;\n                }\n              });\n              if (!hasLanguageBeenSaved) {\n                languagesInBytes.push(\n                  new Language(\n                    languageName,\n                    languageBytes[index],\n                    colors[index]\n                  )\n                );\n              }\n              hasLanguageBeenSaved = false;\n            }\n          });\n        }\n      })\n    );\n    return languagesInBytes;\n  } catch (err) {\n    console.log(`Error: ${err}`);\n  }\n};\n\nconst convertToPercent = (languagesInBytes) => {\n  let languagesInPercent = languagesInBytes;\n  let sum = 0;\n  let percentage = 0;\n\n  languagesInBytes.forEach((language) => {\n    sum += language.bytes;\n  });\n\n  languagesInBytes.map((language, index) => {\n    percentage = Math.round((language.bytes / sum) * 1000) / 10;\n    return (languagesInPercent[index].bytes = percentage);\n  });\n\n  return languagesInPercent;\n};\n\nconst checkForOther = (languagesInPercent) => {\n  let sumOfOther = 0;\n\n  let sumFunction = (total, currentLanguage) => {\n    return total + currentLanguage.bytes;\n  };\n\n  sumOfOther =\n    Math.round(\n      languagesInPercent\n        .filter((language) => language.bytes < 1)\n        .reduce(sumFunction, 0) * 10\n    ) / 10;\n  let languages = languagesInPercent.filter((language) => language.bytes > 1);\n\n  if (sumOfOther > 0) {\n    languages.splice();\n    languages.push(new Language('Other', sumOfOther, '#CCCCCC'));\n  }\n  return languages;\n};\n\nconst deconstructArray = (languagesWithOther) => {\n  let languageData = [];\n\n  languagesWithOther.forEach((language) => {\n    languageData.push(\n      new LanguageData(language.language, language.bytes, language.color)\n    );\n  });\n\n  return languageData;\n};\n\nconst getLanguages = async () => {\n  const repos = await fetchRepos();\n  const languagesInBytes = await fetchLanguages(repos);\n  const languagesInPercent = convertToPercent(languagesInBytes);\n  const languagesWithOther = checkForOther(languagesInPercent);\n  const languages = deconstructArray(languagesWithOther);\n  return languages;\n};\n\nexport default getLanguages;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from 'drei';\nimport './App.scss';\nimport { useSpring, a } from 'react-spring/three';\n\nimport Languages from './components/github';\nimport QR from './images/qr-code-2.png';\n\n// soft Shadows\nsoftShadows();\n\nconst SpinningMesh = ({ position, color, speed, args }) => {\n  //ref to target the mesh\n  const mesh = useRef();\n\n  //useFrame allows us to re-render/update rotation on each frame\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow\n    >\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n      <MeshWobbleMaterial\n        color={color}\n        speed={speed}\n        attach=\"material\"\n        factor={0.6}\n      />\n    </a.mesh>\n  );\n};\n\nconst App = () => {\n  const [languages, setLanguages] = useState([]);\n\n  useEffect(() => {\n    const fetchLanguages = async () => {\n      const languageArray = await Languages();\n      setLanguages(languageArray);\n    };\n    fetchLanguages();\n  }, []);\n\n  for (let i = 0; i < languages.length; i++) {\n    const x = languages[i].id;\n  }\n\n  const [name, setName] = useState('');\n  const [repos, setRepos] = useState('');\n  const [location, setLocation] = useState('');\n  const [bio, setBio] = useState('');\n  const [url, setUrl] = useState('');\n\n  useEffect(() => {\n    fetch('https://api.github.com/users/matildabjorken')\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data);\n      });\n  }, []);\n\n  const setData = ({\n    name,\n    location,\n    bio,\n    avatar_url,\n    public_repos,\n    html_url,\n  }) => {\n    setName(name);\n    setRepos(public_repos);\n    setLocation(location);\n    setBio(bio);\n    setUrl(html_url);\n  };\n\n  return (\n    <>\n      <div className=\"info-card\">\n        <img src={QR} className=\"qr-code\" />\n      </div>\n      {/* Our Scene & Camera is already built into our canvas */}\n      <div className=\"canvas-wrapper\">\n        <Canvas\n          id=\"canvas\"\n          height=\"100px\"\n          colorManagement\n          shadowMap\n          camera={{ position: [-5, 3, 10], fov: 60 }}\n        >\n          {/* This light makes things look pretty */}\n          <ambientLight intensity={0.2} />\n          {/* Our main source of light, also casting our shadow */}\n          <directionalLight\n            castShadow\n            position={[0, 10, 0]}\n            intensity={1.5}\n            shadow-mapSize-width={1024}\n            shadow-mapSize-height={1024}\n            shadow-camera-far={50}\n            shadow-camera-left={-10}\n            shadow-camera-right={10}\n            shadow-camera-top={10}\n            shadow-camera-bottom={-10}\n          />\n          {/* A light to help illumnate the spinning boxes */}\n          <pointLight position={[-10, 0, -20]} intensity={0.5} />\n          <pointLight position={[0, -10, 0]} intensity={1.5} />\n          <group>\n            {/* This mesh is the plane (The floor) */}\n            <mesh\n              rotation={[-Math.PI / 2, 0, 0]}\n              position={[0, -5, 0]}\n              receiveShadow\n            >\n              <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n              <shadowMaterial attach=\"material\" opacity={0.3} />\n            </mesh>\n            <SpinningMesh\n              position={[0, -2, 0]}\n              color=\"lightblue\"\n              args={[2, 2, 2]}\n              speed={2}\n            />\n            <SpinningMesh\n              position={[-2, -1, -5]}\n              color=\"lightgreen\"\n              args={[2, 2, 2]}\n              speed={6}\n            />\n            <SpinningMesh\n              position={[5, -1, -2]}\n              color=\"pink\"\n              args={[2, 2, 2]}\n              speed={6}\n            />\n          </group>\n          {/* Allows us to move the canvas around for different prespectives */}\n        </Canvas>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}